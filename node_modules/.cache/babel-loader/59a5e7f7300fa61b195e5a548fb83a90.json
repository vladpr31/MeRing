{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VLAD\\\\Desktop\\\\Study\\\\Self Study Projects\\\\My Projects\\\\React\\\\SortingVisualizer\\\\src\\\\Components\\\\SortingVisualizer\\\\SortingVisualizer.js\";\nimport React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport { getMergeSortAnimations, getNewArray } from \"../SortingAlgorithms/SortingAlgorithms\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 10; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = \"green\"; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = \"red\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  } //When Component First Loads or we call it, Resets the Array or Generates a new array.\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //Generates new Array.\n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < 40; i++) {\n      array.push(randomIntFromInterval(5, 100));\n    }\n\n    this.setState({\n      array\n    });\n  } //Merge Sort \"Animation\".\n\n\n  Sort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"arrayBar\");\n      console.log(arrayBars);\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } //Changes the Text Numbers after the Sort.\n\n\n  newArray() {\n    this.state.array = getNewArray(this.state.array);\n    const bars = document.getElementsByClassName(\"arrayBar\");\n\n    for (let i = 0; i < bars.length; i++) {\n      bars[i].querySelector(\"span\").innerHTML = this.state.array[i];\n    }\n  } //Render Page.\n\n\n  render() {\n    let {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"navLinks\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.resetArray(),\n            children: \"Generate New Array.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.Sort();\n              this.state.array = this.newArray();\n            },\n            children: \"Sort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"arrayContainer\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrayBar\",\n          style: {\n            height: `${value * 5}px`\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n\n} //Generates random number between min and max.\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"names":["React","getMergeSortAnimations","getNewArray","ANIMATION_SPEED_MS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","Sort","animations","length","arrayBars","document","getElementsByClassName","console","log","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","newArray","bars","querySelector","innerHTML","render","map","value","idx","min","max","Math","floor","random"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/SortingVisualizer/src/Components/SortingVisualizer/SortingVisualizer.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\nimport {\r\n  getMergeSortAnimations,\r\n  getNewArray,\r\n} from \"../SortingAlgorithms/SortingAlgorithms\";\r\n\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"green\";\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n  //When Component First Loads or we call it, Resets the Array or Generates a new array.\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  //Generates new Array.\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 40; i++) {\r\n      array.push(randomIntFromInterval(5, 100));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  //Merge Sort \"Animation\".\r\n  Sort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"arrayBar\");\r\n      console.log(arrayBars);\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  //Changes the Text Numbers after the Sort.\r\n  newArray() {\r\n    this.state.array = getNewArray(this.state.array);\r\n    const bars = document.getElementsByClassName(\"arrayBar\");\r\n    for (let i = 0; i < bars.length; i++) {\r\n      bars[i].querySelector(\"span\").innerHTML = this.state.array[i];\r\n    }\r\n  }\r\n\r\n  //Render Page.\r\n  render() {\r\n    let { array } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <ul className=\"navLinks\">\r\n          <li>\r\n            <button onClick={() => this.resetArray()}>\r\n              Generate New Array.\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              onClick={() => {\r\n                this.Sort();\r\n                this.state.array = this.newArray();\r\n              }}\r\n            >\r\n              Sort\r\n            </button>\r\n          </li>\r\n        </ul>\r\n        <div className=\"arrayContainer\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"arrayBar\"\r\n              key={idx}\r\n              style={{ height: `${value * 5}px` }}\r\n            >\r\n              <span>{value}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//Generates random number between min and max.\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}