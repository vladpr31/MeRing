{"ast":null,"code":"export function getQuickSort(array, leftIndex, rightindex) {\n  var index;\n\n  if (array.length > 1) {\n    index = partition(array, leftIndex, rightindex); //index returned from partition\n\n    if (leftIndex < index - 1) {\n      //more elements on the left side of the pivot\n      getQuickSort(array, leftIndex, index - 1);\n    }\n\n    if (index < rightindex) {\n      //more elements on the right side of the pivot\n      getQuickSort(array, index, rightindex);\n    }\n  }\n\n  return array;\n}\n\nfunction swap(array, leftIndex, rightIndex) {\n  var temp = array[leftIndex];\n  array[leftIndex] = array[rightIndex];\n  array[rightIndex] = temp;\n}\n\nfunction partition(items, left, right) {\n  var pivot = items[Math.floor((right + left) / 2)],\n      //middle element\n  i = left,\n      //left pointer\n  j = right; //right pointer\n\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n\n    while (items[j] > pivot) {\n      j--;\n    }\n\n    if (i <= j) {\n      swap(items, i, j); //swap two elements\n\n      i++;\n      j--;\n    }\n  }\n\n  return i;\n}","map":{"version":3,"names":["getQuickSort","array","leftIndex","rightindex","index","length","partition","swap","rightIndex","temp","items","left","right","pivot","Math","floor","i","j"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/SortingVisualizer/src/Components/SortingAlgorithms/SortingAlgorithms.js"],"sourcesContent":["export function getQuickSort(array, leftIndex, rightindex) {\r\n  var index;\r\n  if (array.length > 1) {\r\n    index = partition(array, leftIndex, rightindex); //index returned from partition\r\n    if (leftIndex < index - 1) {\r\n      //more elements on the left side of the pivot\r\n      getQuickSort(array, leftIndex, index - 1);\r\n    }\r\n    if (index < rightindex) {\r\n      //more elements on the right side of the pivot\r\n      getQuickSort(array, index, rightindex);\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction swap(array, leftIndex, rightIndex) {\r\n  var temp = array[leftIndex];\r\n  array[leftIndex] = array[rightIndex];\r\n  array[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(items, left, right) {\r\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n    i = left, //left pointer\r\n    j = right; //right pointer\r\n  while (i <= j) {\r\n    while (items[i] < pivot) {\r\n      i++;\r\n    }\r\n    while (items[j] > pivot) {\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(items, i, j); //swap two elements\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,UAAxC,EAAoD;EACzD,IAAIC,KAAJ;;EACA,IAAIH,KAAK,CAACI,MAAN,GAAe,CAAnB,EAAsB;IACpBD,KAAK,GAAGE,SAAS,CAACL,KAAD,EAAQC,SAAR,EAAmBC,UAAnB,CAAjB,CADoB,CAC6B;;IACjD,IAAID,SAAS,GAAGE,KAAK,GAAG,CAAxB,EAA2B;MACzB;MACAJ,YAAY,CAACC,KAAD,EAAQC,SAAR,EAAmBE,KAAK,GAAG,CAA3B,CAAZ;IACD;;IACD,IAAIA,KAAK,GAAGD,UAAZ,EAAwB;MACtB;MACAH,YAAY,CAACC,KAAD,EAAQG,KAAR,EAAeD,UAAf,CAAZ;IACD;EACF;;EACD,OAAOF,KAAP;AACD;;AAED,SAASM,IAAT,CAAcN,KAAd,EAAqBC,SAArB,EAAgCM,UAAhC,EAA4C;EAC1C,IAAIC,IAAI,GAAGR,KAAK,CAACC,SAAD,CAAhB;EACAD,KAAK,CAACC,SAAD,CAAL,GAAmBD,KAAK,CAACO,UAAD,CAAxB;EACAP,KAAK,CAACO,UAAD,CAAL,GAAoBC,IAApB;AACD;;AAED,SAASH,SAAT,CAAmBI,KAAnB,EAA0BC,IAA1B,EAAgCC,KAAhC,EAAuC;EACrC,IAAIC,KAAK,GAAGH,KAAK,CAACI,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,GAAGD,IAAT,IAAiB,CAA5B,CAAD,CAAjB;EAAA,IAAmD;EACjDK,CAAC,GAAGL,IADN;EAAA,IACY;EACVM,CAAC,GAAGL,KAFN,CADqC,CAGxB;;EACb,OAAOI,CAAC,IAAIC,CAAZ,EAAe;IACb,OAAOP,KAAK,CAACM,CAAD,CAAL,GAAWH,KAAlB,EAAyB;MACvBG,CAAC;IACF;;IACD,OAAON,KAAK,CAACO,CAAD,CAAL,GAAWJ,KAAlB,EAAyB;MACvBI,CAAC;IACF;;IACD,IAAID,CAAC,IAAIC,CAAT,EAAY;MACVV,IAAI,CAACG,KAAD,EAAQM,CAAR,EAAWC,CAAX,CAAJ,CADU,CACS;;MACnBD,CAAC;MACDC,CAAC;IACF;EACF;;EACD,OAAOD,CAAP;AACD"},"metadata":{},"sourceType":"module"}