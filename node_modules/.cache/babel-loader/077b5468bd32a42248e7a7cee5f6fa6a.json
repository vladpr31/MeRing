{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _Emitters_engine;\n\nimport { arrayRandomIndex, deepExtend, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n  constructor(engine, container) {\n    this.container = container;\n\n    _Emitters_engine.set(this, void 0);\n\n    __classPrivateFieldSet(this, _Emitters_engine, engine, \"f\");\n\n    this.array = [];\n    this.emitters = [];\n    this.interactivityEmitters = {\n      random: {\n        count: 1,\n        enable: false\n      },\n      value: []\n    };\n\n    container.getEmitter = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n\n    container.addEmitter = (options, position) => this.addEmitter(options, position);\n\n    container.removeEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        this.removeEmitter(emitter);\n      }\n    };\n\n    container.playEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPlay();\n      }\n    };\n\n    container.pauseEmitter = idxOrName => {\n      const emitter = container.getEmitter(idxOrName);\n\n      if (emitter) {\n        emitter.externalPause();\n      }\n    };\n  }\n\n  addEmitter(options, position) {\n    const emitterOptions = new Emitter();\n    emitterOptions.load(options);\n    const emitter = new EmitterInstance(__classPrivateFieldGet(this, _Emitters_engine, \"f\"), this, this.container, emitterOptions, position);\n    this.array.push(emitter);\n    return emitter;\n  }\n\n  handleClickMode(mode) {\n    const emitterOptions = this.emitters,\n          modeEmitters = this.interactivityEmitters;\n\n    if (mode === \"emitter\") {\n      let emittersModeOptions;\n\n      if (modeEmitters && modeEmitters.value instanceof Array) {\n        if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n          emittersModeOptions = [];\n          const usedIndexes = [];\n\n          for (let i = 0; i < modeEmitters.random.count; i++) {\n            const idx = arrayRandomIndex(modeEmitters.value);\n\n            if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n              i--;\n              continue;\n            }\n\n            usedIndexes.push(idx);\n            emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n          }\n        } else {\n          emittersModeOptions = modeEmitters.value;\n        }\n      } else {\n        emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n      }\n\n      const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions,\n            ePosition = this.container.interactivity.mouse.clickPosition;\n\n      if (emittersOptions instanceof Array) {\n        for (const emitterOptions of emittersOptions) {\n          this.addEmitter(emitterOptions, ePosition);\n        }\n      } else {\n        this.addEmitter(deepExtend({}, emittersOptions), ePosition);\n      }\n    }\n  }\n\n  init(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    if (!options) {\n      return;\n    }\n\n    if (options.emitters) {\n      if (options.emitters instanceof Array) {\n        this.emitters = options.emitters.map(s => {\n          const tmp = new Emitter();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.emitters instanceof Array) {\n          this.emitters = new Emitter();\n        }\n\n        this.emitters.load(options.emitters);\n      }\n    }\n\n    const interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n\n    if (interactivityEmitters) {\n      if (interactivityEmitters instanceof Array) {\n        this.interactivityEmitters = {\n          random: {\n            count: 1,\n            enable: true\n          },\n          value: interactivityEmitters.map(s => {\n            const tmp = new Emitter();\n            tmp.load(s);\n            return tmp;\n          })\n        };\n      } else {\n        const emitterMode = interactivityEmitters;\n\n        if (emitterMode.value !== undefined) {\n          if (emitterMode.value instanceof Array) {\n            this.interactivityEmitters = {\n              random: {\n                count: (_c = this.interactivityEmitters.random.count) !== null && _c !== void 0 ? _c : 1,\n                enable: (_d = this.interactivityEmitters.random.enable) !== null && _d !== void 0 ? _d : false\n              },\n              value: emitterMode.value.map(s => {\n                const tmp = new Emitter();\n                tmp.load(s);\n                return tmp;\n              })\n            };\n          } else {\n            const tmp = new Emitter();\n            tmp.load(emitterMode.value);\n            this.interactivityEmitters = {\n              random: {\n                count: (_e = this.interactivityEmitters.random.count) !== null && _e !== void 0 ? _e : 1,\n                enable: (_f = this.interactivityEmitters.random.enable) !== null && _f !== void 0 ? _f : false\n              },\n              value: tmp\n            };\n          }\n        } else {\n          const tmp = new Emitter();\n          tmp.load(interactivityEmitters);\n          this.interactivityEmitters = {\n            random: {\n              count: (_g = this.interactivityEmitters.random.count) !== null && _g !== void 0 ? _g : 1,\n              enable: (_h = this.interactivityEmitters.random.enable) !== null && _h !== void 0 ? _h : false\n            },\n            value: tmp\n          };\n        }\n      }\n    }\n\n    if (this.emitters instanceof Array) {\n      for (const emitterOptions of this.emitters) {\n        this.addEmitter(emitterOptions);\n      }\n    } else {\n      this.addEmitter(this.emitters);\n    }\n  }\n\n  pause() {\n    for (const emitter of this.array) {\n      emitter.pause();\n    }\n  }\n\n  play() {\n    for (const emitter of this.array) {\n      emitter.play();\n    }\n  }\n\n  removeEmitter(emitter) {\n    const index = this.array.indexOf(emitter);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n  resize() {\n    for (const emitter of this.array) {\n      emitter.resize();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n  update(delta) {\n    for (const emitter of this.array) {\n      emitter.update(delta);\n    }\n  }\n\n}\n_Emitters_engine = new WeakMap();","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_Emitters_engine","arrayRandomIndex","deepExtend","itemFromArray","Emitter","EmitterInstance","Emitters","constructor","engine","container","array","emitters","interactivityEmitters","random","count","enable","getEmitter","idxOrName","undefined","find","t","name","addEmitter","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","emitterOptions","load","push","handleClickMode","mode","modeEmitters","emittersModeOptions","Array","length","usedIndexes","i","idx","includes","emittersOptions","ePosition","interactivity","mouse","clickPosition","init","_a","_b","_c","_d","_e","_f","_g","_h","map","s","tmp","modes","emitterMode","pause","play","index","indexOf","splice","resize","stop","update","delta","WeakMap"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/MedicalInspection/node_modules/tsparticles-plugin-emitters/esm/Emitters.js"],"sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Emitters_engine;\nimport { arrayRandomIndex, deepExtend, itemFromArray } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterInstance } from \"./EmitterInstance\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        _Emitters_engine.set(this, void 0);\n        __classPrivateFieldSet(this, _Emitters_engine, engine, \"f\");\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        container.getEmitter = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    addEmitter(options, position) {\n        const emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(__classPrivateFieldGet(this, _Emitters_engine, \"f\"), this, this.container, emitterOptions, position);\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode === \"emitter\") {\n            let emittersModeOptions;\n            if (modeEmitters && modeEmitters.value instanceof Array) {\n                if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                    emittersModeOptions = [];\n                    const usedIndexes = [];\n                    for (let i = 0; i < modeEmitters.random.count; i++) {\n                        const idx = arrayRandomIndex(modeEmitters.value);\n                        if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                            i--;\n                            continue;\n                        }\n                        usedIndexes.push(idx);\n                        emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                    }\n                }\n                else {\n                    emittersModeOptions = modeEmitters.value;\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n            }\n            const emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n            if (emittersOptions instanceof Array) {\n                for (const emitterOptions of emittersOptions) {\n                    this.addEmitter(emitterOptions, ePosition);\n                }\n            }\n            else {\n                this.addEmitter(deepExtend({}, emittersOptions), ePosition);\n            }\n        }\n    }\n    init(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (!options) {\n            return;\n        }\n        if (options.emitters) {\n            if (options.emitters instanceof Array) {\n                this.emitters = options.emitters.map((s) => {\n                    const tmp = new Emitter();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.emitters instanceof Array) {\n                    this.emitters = new Emitter();\n                }\n                this.emitters.load(options.emitters);\n            }\n        }\n        const interactivityEmitters = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n        if (interactivityEmitters) {\n            if (interactivityEmitters instanceof Array) {\n                this.interactivityEmitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (emitterMode.value instanceof Array) {\n                        this.interactivityEmitters = {\n                            random: {\n                                count: (_c = this.interactivityEmitters.random.count) !== null && _c !== void 0 ? _c : 1,\n                                enable: (_d = this.interactivityEmitters.random.enable) !== null && _d !== void 0 ? _d : false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        this.interactivityEmitters = {\n                            random: {\n                                count: (_e = this.interactivityEmitters.random.count) !== null && _e !== void 0 ? _e : 1,\n                                enable: (_f = this.interactivityEmitters.random.enable) !== null && _f !== void 0 ? _f : false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const tmp = new Emitter();\n                    tmp.load(interactivityEmitters);\n                    this.interactivityEmitters = {\n                        random: {\n                            count: (_g = this.interactivityEmitters.random.count) !== null && _g !== void 0 ? _g : 1,\n                            enable: (_h = this.interactivityEmitters.random.enable) !== null && _h !== void 0 ? _h : false,\n                        },\n                        value: tmp,\n                    };\n                }\n            }\n        }\n        if (this.emitters instanceof Array) {\n            for (const emitterOptions of this.emitters) {\n                this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n_Emitters_engine = new WeakMap();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}