{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nexport function getNewArray(array) {\n  console.log(array);\n  doMerge(array);\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nexport function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n\n  return mainArray;\n}","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","getNewArray","console","log","doMerge","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/SortingVisualizer/src/Components/SortingAlgorithms/SortingAlgorithms.js"],"sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\nexport function getNewArray(array) {\r\n  console.log(array);\r\n  doMerge(array);\r\n}\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nexport function doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n  return mainArray;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}