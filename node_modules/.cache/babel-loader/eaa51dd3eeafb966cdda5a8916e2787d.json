{"ast":null,"code":"export const AlgoList = [{\n  title: \"Quick Sort\",\n  description: \"Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as a pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. \",\n  steps: [\"Always pick the first element as a pivot.\", \"Always pick the last element as a pivot.\", \"Pick a random element as a pivot.\", \"Pick median as the pivot.\"]\n}, {\n  title: \"Merge Sort\",\n  description: \"The Merge Sort algorithm is a sorting algorithm that is considered as an example of the divide and conquer strategy. So, in this algorithm, the array is initially divided into two equal halves and then they are combined in a sorted manner. We can think of it as a recursive algorithm that continuously splits the array in half until it cannot be further divided. This means that if the array becomes empty or has only one element left, the dividing will stop, i.e. it is the base case to stop the recursion. If the array has multiple elements, we split the array into halves and recursively invoke the merge sort on each of the halves. Finally, when both the halves are sorted, the merge operation is applied. Merge operation is the process of taking two smaller sorted arrays and combining them to eventually make a larger one.\",\n  steps: [\"Declare left variable to 0 and right variable to n-1.\", \" Find mid by medium formula. mid = (left+right)/2.\", \"Call merge sort on (left,mid).\", \"Call merge sort on (mid+1,rear).\", \"Continue till left is less than right.\", \"Then call merge function to perform merge sort.\"]\n}, {\n  title: \"Shell Sort\",\n  description: \"Shell sort is mainly a variation of Insertion Sort. In insertion sort, we move elements only one position ahead. When an element has to be moved far ahead, many movements are involved. The idea of ShellSort is to allow the exchange of far items. In Shell sort, we make the array h-sorted for a large value of h. We keep reducing the value of h until it becomes 1. An array is said to be h-sorted if all sublists of every h’th element are sorted.\",\n  steps: [\"Step 1 − Start\", \"Step 2 − Initialize the value of gap size. Example: h\", \"Step 3 − Divide the list into smaller sub-part. Each must have equal intervals to h\", \"Step 4 − Sort these sub-lists using insertion sort\", \"Step 5 – Repeat this step 2 until the list is sorted.\", \"Step 6 – Print a sorted list.\", \"Step 7 – Stop.\"]\n}, {\n  title: \"Heap Sort\",\n  description: \"Heap sort is a comparison-based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the minimum element and place the minimum element at the beginning. We repeat the same process for the remaining elements.\" + \"What is Binary Heap?\" + \"Let us first define a Complete Binary Tree. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible\" + \"A Binary Heap is a Complete Binary Tree where items are stored in a special order such that the value in a parent node is greater(or smaller) than the values in its two children nodes. The former is called max heap and the latter is called min-heap. The heap can be represented by a binary tree or array.\"\n}];","map":{"version":3,"names":["AlgoList","title","description","steps"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/SortingVisualizer/src/Components/PsudoAlgorithms/PsudoAlgoData.js"],"sourcesContent":["export const AlgoList = [\r\n  {\r\n    title: \"Quick Sort\",\r\n    description:\r\n      \"Like Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as a pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. \",\r\n    steps: [\r\n      \"Always pick the first element as a pivot.\",\r\n      \"Always pick the last element as a pivot.\",\r\n      \"Pick a random element as a pivot.\",\r\n      \"Pick median as the pivot.\",\r\n    ],\r\n  },\r\n  {\r\n    title: \"Merge Sort\",\r\n    description:\r\n      \"The Merge Sort algorithm is a sorting algorithm that is considered as an example of the divide and conquer strategy. So, in this algorithm, the array is initially divided into two equal halves and then they are combined in a sorted manner. We can think of it as a recursive algorithm that continuously splits the array in half until it cannot be further divided. This means that if the array becomes empty or has only one element left, the dividing will stop, i.e. it is the base case to stop the recursion. If the array has multiple elements, we split the array into halves and recursively invoke the merge sort on each of the halves. Finally, when both the halves are sorted, the merge operation is applied. Merge operation is the process of taking two smaller sorted arrays and combining them to eventually make a larger one.\",\r\n    steps: [\r\n      \"Declare left variable to 0 and right variable to n-1.\",\r\n      \" Find mid by medium formula. mid = (left+right)/2.\",\r\n      \"Call merge sort on (left,mid).\",\r\n      \"Call merge sort on (mid+1,rear).\",\r\n      \"Continue till left is less than right.\",\r\n      \"Then call merge function to perform merge sort.\",\r\n    ],\r\n  },\r\n  {\r\n    title: \"Shell Sort\",\r\n    description:\r\n      \"Shell sort is mainly a variation of Insertion Sort. In insertion sort, we move elements only one position ahead. When an element has to be moved far ahead, many movements are involved. The idea of ShellSort is to allow the exchange of far items. In Shell sort, we make the array h-sorted for a large value of h. We keep reducing the value of h until it becomes 1. An array is said to be h-sorted if all sublists of every h’th element are sorted.\",\r\n    steps: [\r\n      \"Step 1 − Start\",\r\n      \"Step 2 − Initialize the value of gap size. Example: h\",\r\n      \"Step 3 − Divide the list into smaller sub-part. Each must have equal intervals to h\",\r\n      \"Step 4 − Sort these sub-lists using insertion sort\",\r\n      \"Step 5 – Repeat this step 2 until the list is sorted.\",\r\n      \"Step 6 – Print a sorted list.\",\r\n      \"Step 7 – Stop.\",\r\n    ],\r\n  },\r\n  {\r\n    title: \"Heap Sort\",\r\n    description:\r\n      \"Heap sort is a comparison-based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the minimum element and place the minimum element at the beginning. We repeat the same process for the remaining elements.\" +\r\n      \"What is Binary Heap?\" +\r\n      \"Let us first define a Complete Binary Tree. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible\" +\r\n      \"A Binary Heap is a Complete Binary Tree where items are stored in a special order such that the value in a parent node is greater(or smaller) than the values in its two children nodes. The former is called max heap and the latter is called min-heap. The heap can be represented by a binary tree or array.\",\r\n  },\r\n];\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CACtB;EACEC,KAAK,EAAE,YADT;EAEEC,WAAW,EACT,yOAHJ;EAIEC,KAAK,EAAE,CACL,2CADK,EAEL,0CAFK,EAGL,mCAHK,EAIL,2BAJK;AAJT,CADsB,EAYtB;EACEF,KAAK,EAAE,YADT;EAEEC,WAAW,EACT,8zBAHJ;EAIEC,KAAK,EAAE,CACL,uDADK,EAEL,oDAFK,EAGL,gCAHK,EAIL,kCAJK,EAKL,wCALK,EAML,iDANK;AAJT,CAZsB,EAyBtB;EACEF,KAAK,EAAE,YADT;EAEEC,WAAW,EACT,+bAHJ;EAIEC,KAAK,EAAE,CACL,gBADK,EAEL,uDAFK,EAGL,qFAHK,EAIL,oDAJK,EAKL,uDALK,EAML,+BANK,EAOL,gBAPK;AAJT,CAzBsB,EAuCtB;EACEF,KAAK,EAAE,WADT;EAEEC,WAAW,EACT,0QACA,sBADA,GAEA,qMAFA,GAGA;AANJ,CAvCsB,CAAjB"},"metadata":{},"sourceType":"module"}