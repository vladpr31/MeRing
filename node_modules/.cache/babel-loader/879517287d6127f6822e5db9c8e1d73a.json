{"ast":null,"code":"import { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n  draw(context, particle, radius, opacity) {\n    var _a, _b, _c;\n\n    const character = particle.shapeData;\n\n    if (character === undefined) {\n      return;\n    }\n\n    const textData = character.value;\n\n    if (textData === undefined) {\n      return;\n    }\n\n    const textParticle = particle;\n\n    if (textParticle.text === undefined) {\n      textParticle.text = textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n    }\n\n    const text = textParticle.text,\n          style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\",\n          weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\",\n          size = Math.round(radius) * 2,\n          font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\",\n          fill = particle.fill,\n          offsetX = text.length * radius / 2;\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    const pos = {\n      x: -offsetX,\n      y: radius / 2\n    };\n    context.globalAlpha = opacity;\n\n    if (fill) {\n      context.fillText(text, pos.x, pos.y);\n    } else {\n      context.strokeText(text, pos.x, pos.y);\n    }\n\n    context.globalAlpha = 1;\n  }\n\n  getSidesCount() {\n    return 12;\n  }\n\n  async init(container) {\n    const options = container.actualOptions;\n\n    if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n      const shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t);\n\n      if (shapeOptions instanceof Array) {\n        const promises = [];\n\n        for (const character of shapeOptions) {\n          const charShape = character;\n          promises.push(loadFont(charShape.font, charShape.weight));\n        }\n\n        await Promise.allSettled(promises);\n      } else {\n        if (shapeOptions !== undefined) {\n          const charShape = shapeOptions;\n          await loadFont(charShape.font, charShape.weight);\n        }\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["isInArray","itemFromArray","loadFont","validTypes","TextDrawer","draw","context","particle","radius","opacity","_a","_b","_c","character","shapeData","undefined","textData","value","textParticle","text","Array","randomIndexData","style","weight","size","Math","round","font","fill","offsetX","length","pos","x","y","globalAlpha","fillText","strokeText","getSidesCount","init","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","promises","charShape","push","Promise","allSettled"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/MedicalInspection/node_modules/tsparticles-shape-text/esm/TextDrawer.js"],"sourcesContent":["import { isInArray, itemFromArray, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        var _a, _b, _c;\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        const textParticle = particle;\n        if (textParticle.text === undefined) {\n            textParticle.text =\n                textData instanceof Array ? itemFromArray(textData, particle.randomIndexData) : textData;\n        }\n        const text = textParticle.text, style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\", weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\", size = Math.round(radius) * 2, font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t);\n            if (shapeOptions instanceof Array) {\n                const promises = [];\n                for (const character of shapeOptions) {\n                    const charShape = character;\n                    promises.push(loadFont(charShape.font, charShape.weight));\n                }\n                await Promise.allSettled(promises);\n            }\n            else {\n                if (shapeOptions !== undefined) {\n                    const charShape = shapeOptions;\n                    await loadFont(charShape.font, charShape.weight);\n                }\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}