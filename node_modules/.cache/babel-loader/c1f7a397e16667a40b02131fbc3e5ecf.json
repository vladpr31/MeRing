{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const sortAlgo = document.querySelector(\"#selector\");\n  console.log(sortAlgo.value);\n  const animations = [];\n  if (array.length <= 1) return array;\n\n  if (sortAlgo.value == \"Merge Sort\") {\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  }\n\n  if (sortAlgo.value == \"Quick Sort\") {\n    doQuickSort(array, 0, array.length - 1, animations);\n  }\n\n  return animations;\n}\nexport function getNewArray(array) {\n  const algoName = document.querySelector(\"#selector\");\n\n  if (algoName.value == \"Merge Sort\") {\n    return doMerge(array);\n  }\n\n  if (algoName.value == \"Quick Sort\") {\n    return doQuickSort(array);\n  }\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nexport function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n\n  return mainArray;\n}\n\nfunction qucikSortHelper(mainArray, startIndex, endIndex, animations) {\n  const pivot = mainArray[endIndex];\n  let i = startIndex - 1;\n\n  for (let j = startIndex; j <= endIndex; j++) {\n    if (mainArray[j] < pivot) {\n      animations.push(i, j);\n      animations.push(i, j);\n      i++;\n      let temp = mainArray[i];\n      mainArray[i] = mainArray[j];\n      mainArray[j] = temp;\n    }\n  }\n\n  let temp = mainArray[i + 1];\n  mainArray[i + 1] = mainArray[endIndex];\n  mainArray[endIndex] = temp;\n  return i + 1;\n}\n\nfunction doQuickSort(mainArray, startIndex, endIndex, animations) {\n  if (startIndex < endIndex) {\n    let pi = qucikSortHelper(mainArray, startIndex, endIndex, animations);\n    doQuickSort(mainArray, startIndex, pi - 1);\n    doQuickSort(mainArray, pi + 1, endIndex);\n  }\n\n  return mainArray;\n}","map":{"version":3,"names":["getMergeSortAnimations","array","sortAlgo","document","querySelector","console","log","value","animations","length","auxiliaryArray","slice","mergeSortHelper","doQuickSort","getNewArray","algoName","doMerge","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","qucikSortHelper","startIndex","endIndex","pivot","temp","pi"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/SortingVisualizer/src/Components/SortingAlgorithms/SortingAlgorithms.js"],"sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const sortAlgo = document.querySelector(\"#selector\");\r\n  console.log(sortAlgo.value);\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  if (sortAlgo.value == \"Merge Sort\") {\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  }\r\n  if (sortAlgo.value == \"Quick Sort\") {\r\n    doQuickSort(array, 0, array.length - 1, animations);\r\n  }\r\n  return animations;\r\n}\r\nexport function getNewArray(array) {\r\n  const algoName = document.querySelector(\"#selector\");\r\n  if (algoName.value == \"Merge Sort\") {\r\n    return doMerge(array);\r\n  }\r\n  if (algoName.value == \"Quick Sort\") {\r\n    return doQuickSort(array);\r\n  }\r\n}\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nexport function doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n  return mainArray;\r\n}\r\n\r\nfunction qucikSortHelper(mainArray, startIndex, endIndex, animations) {\r\n  const pivot = mainArray[endIndex];\r\n  let i = startIndex - 1;\r\n  for (let j = startIndex; j <= endIndex; j++) {\r\n    if (mainArray[j] < pivot) {\r\n      animations.push(i, j);\r\n      animations.push(i, j);\r\n\r\n      i++;\r\n      let temp = mainArray[i];\r\n      mainArray[i] = mainArray[j];\r\n      mainArray[j] = temp;\r\n    }\r\n  }\r\n  let temp = mainArray[i + 1];\r\n  mainArray[i + 1] = mainArray[endIndex];\r\n  mainArray[endIndex] = temp;\r\n  return i + 1;\r\n}\r\n\r\nfunction doQuickSort(mainArray, startIndex, endIndex, animations) {\r\n  if (startIndex < endIndex) {\r\n    let pi = qucikSortHelper(mainArray, startIndex, endIndex, animations);\r\n    doQuickSort(mainArray, startIndex, pi - 1);\r\n    doQuickSort(mainArray, pi + 1, endIndex);\r\n  }\r\n  return mainArray;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}