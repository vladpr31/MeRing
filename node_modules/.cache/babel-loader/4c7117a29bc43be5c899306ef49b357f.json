{"ast":null,"code":"export function getQuickSort(array) {\n  var index;\n\n  if (array.length > 1) {\n    index = partition(array, left, right); //index returned from partition\n\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(array, left, index - 1);\n    }\n\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(array, index, right);\n    }\n  }\n\n  return array;\n}\n\nfunction swap(array, leftIndex, rightIndex) {\n  var temp = array[leftIndex];\n  array[leftIndex] = array[rightIndex];\n  array[rightIndex] = temp;\n}\n\nfunction partition(items, left, right) {\n  var pivot = items[Math.floor((right + left) / 2)],\n      //middle element\n  i = left,\n      //left pointer\n  j = right; //right pointer\n\n  while (i <= j) {\n    while (items[i] < pivot) {\n      i++;\n    }\n\n    while (items[j] > pivot) {\n      j--;\n    }\n\n    if (i <= j) {\n      swap(items, i, j); //swap two elements\n\n      i++;\n      j--;\n    }\n  }\n\n  return i;\n}","map":{"version":3,"names":["getQuickSort","array","index","length","partition","left","right","quickSort","swap","leftIndex","rightIndex","temp","items","pivot","Math","floor","i","j"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/SortingVisualizer/src/Components/SortingAlgorithms/SortingAlgorithms.js"],"sourcesContent":["export function getQuickSort(array) {\r\n  var index;\r\n  if (array.length > 1) {\r\n    index = partition(array, left, right); //index returned from partition\r\n    if (left < index - 1) {\r\n      //more elements on the left side of the pivot\r\n      quickSort(array, left, index - 1);\r\n    }\r\n    if (index < right) {\r\n      //more elements on the right side of the pivot\r\n      quickSort(array, index, right);\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction swap(array, leftIndex, rightIndex) {\r\n  var temp = array[leftIndex];\r\n  array[leftIndex] = array[rightIndex];\r\n  array[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(items, left, right) {\r\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n    i = left, //left pointer\r\n    j = right; //right pointer\r\n  while (i <= j) {\r\n    while (items[i] < pivot) {\r\n      i++;\r\n    }\r\n    while (items[j] > pivot) {\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(items, i, j); //swap two elements\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;EAClC,IAAIC,KAAJ;;EACA,IAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;IACpBD,KAAK,GAAGE,SAAS,CAACH,KAAD,EAAQI,IAAR,EAAcC,KAAd,CAAjB,CADoB,CACmB;;IACvC,IAAID,IAAI,GAAGH,KAAK,GAAG,CAAnB,EAAsB;MACpB;MACAK,SAAS,CAACN,KAAD,EAAQI,IAAR,EAAcH,KAAK,GAAG,CAAtB,CAAT;IACD;;IACD,IAAIA,KAAK,GAAGI,KAAZ,EAAmB;MACjB;MACAC,SAAS,CAACN,KAAD,EAAQC,KAAR,EAAeI,KAAf,CAAT;IACD;EACF;;EACD,OAAOL,KAAP;AACD;;AAED,SAASO,IAAT,CAAcP,KAAd,EAAqBQ,SAArB,EAAgCC,UAAhC,EAA4C;EAC1C,IAAIC,IAAI,GAAGV,KAAK,CAACQ,SAAD,CAAhB;EACAR,KAAK,CAACQ,SAAD,CAAL,GAAmBR,KAAK,CAACS,UAAD,CAAxB;EACAT,KAAK,CAACS,UAAD,CAAL,GAAoBC,IAApB;AACD;;AAED,SAASP,SAAT,CAAmBQ,KAAnB,EAA0BP,IAA1B,EAAgCC,KAAhC,EAAuC;EACrC,IAAIO,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAL,CAAW,CAACT,KAAK,GAAGD,IAAT,IAAiB,CAA5B,CAAD,CAAjB;EAAA,IAAmD;EACjDW,CAAC,GAAGX,IADN;EAAA,IACY;EACVY,CAAC,GAAGX,KAFN,CADqC,CAGxB;;EACb,OAAOU,CAAC,IAAIC,CAAZ,EAAe;IACb,OAAOL,KAAK,CAACI,CAAD,CAAL,GAAWH,KAAlB,EAAyB;MACvBG,CAAC;IACF;;IACD,OAAOJ,KAAK,CAACK,CAAD,CAAL,GAAWJ,KAAlB,EAAyB;MACvBI,CAAC;IACF;;IACD,IAAID,CAAC,IAAIC,CAAT,EAAY;MACVT,IAAI,CAACI,KAAD,EAAQI,CAAR,EAAWC,CAAX,CAAJ,CADU,CACS;;MACnBD,CAAC;MACDC,CAAC;IACF;EACF;;EACD,OAAOD,CAAP;AACD"},"metadata":{},"sourceType":"module"}