{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nexport function getNewArray(array) {\n  return doMerge(array);\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nexport function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n\n  return mainArray;\n}\n\nfunction qucikSortHelper(array, startIndex, endIndex) {\n  const pivot = array[endIndex];\n  let i = startIndex - 1;\n\n  for (let j = startIndex; j <= endIndex; j++) {\n    if (array[j] < pivot) {\n      i++;\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n\n  let temp = array[i + 1];\n  array[i + 1] = array[endIndex];\n  return i + 1;\n}\n\nfunction doQuickSort(mainArray, startIndex, endIndex) {}","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","getNewArray","doMerge","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","qucikSortHelper","startIndex","endIndex","pivot","temp","doQuickSort"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/SortingVisualizer/src/Components/SortingAlgorithms/SortingAlgorithms.js"],"sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\nexport function getNewArray(array) {\r\n  return doMerge(array);\r\n}\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nexport function doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n  return mainArray;\r\n}\r\n\r\nfunction qucikSortHelper(array, startIndex, endIndex) {\r\n  const pivot = array[endIndex];\r\n  let i = startIndex - 1;\r\n  for (let j = startIndex; j <= endIndex; j++) {\r\n    if (array[j] < pivot) {\r\n      i++;\r\n      let temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n  }\r\n  let temp = array[i + 1];\r\n  array[i + 1] = array[endIndex];\r\n  return i + 1;\r\n}\r\n\r\nfunction doQuickSort(mainArray, startIndex, endIndex) {}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}