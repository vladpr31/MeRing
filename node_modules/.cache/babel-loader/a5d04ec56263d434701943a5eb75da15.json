{"ast":null,"code":"import { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nimport { itemFromArray } from \"tsparticles-engine\";\nexport class Absorbers {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.absorbers = [];\n    this.interactivityAbsorbers = [];\n\n    container.getAbsorber = idxOrName => idxOrName === undefined || typeof idxOrName === \"number\" ? this.array[idxOrName || 0] : this.array.find(t => t.name === idxOrName);\n\n    container.addAbsorber = (options, position) => this.addAbsorber(options, position);\n  }\n\n  addAbsorber(options, position) {\n    const absorber = new AbsorberInstance(this, this.container, options, position);\n    this.array.push(absorber);\n    return absorber;\n  }\n\n  draw(context) {\n    for (const absorber of this.array) {\n      context.save();\n      absorber.draw(context);\n      context.restore();\n    }\n  }\n\n  handleClickMode(mode) {\n    const absorberOptions = this.absorbers,\n          modeAbsorbers = this.interactivityAbsorbers;\n\n    if (mode === \"absorber\") {\n      let absorbersModeOptions;\n\n      if (modeAbsorbers instanceof Array) {\n        if (modeAbsorbers.length > 0) {\n          absorbersModeOptions = itemFromArray(modeAbsorbers);\n        }\n      } else {\n        absorbersModeOptions = modeAbsorbers;\n      }\n\n      const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : absorberOptions instanceof Array ? itemFromArray(absorberOptions) : absorberOptions,\n            aPosition = this.container.interactivity.mouse.clickPosition;\n      this.addAbsorber(absorbersOptions, aPosition);\n    }\n  }\n\n  init(options) {\n    var _a, _b;\n\n    if (!options) {\n      return;\n    }\n\n    if (options.absorbers) {\n      if (options.absorbers instanceof Array) {\n        this.absorbers = options.absorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.absorbers instanceof Array) {\n          this.absorbers = new Absorber();\n        }\n\n        this.absorbers.load(options.absorbers);\n      }\n    }\n\n    const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n\n    if (interactivityAbsorbers) {\n      if (interactivityAbsorbers instanceof Array) {\n        this.interactivityAbsorbers = interactivityAbsorbers.map(s => {\n          const tmp = new Absorber();\n          tmp.load(s);\n          return tmp;\n        });\n      } else {\n        if (this.interactivityAbsorbers instanceof Array) {\n          this.interactivityAbsorbers = new Absorber();\n        }\n\n        this.interactivityAbsorbers.load(interactivityAbsorbers);\n      }\n    }\n\n    if (this.absorbers instanceof Array) {\n      for (const absorberOptions of this.absorbers) {\n        this.addAbsorber(absorberOptions);\n      }\n    } else {\n      this.addAbsorber(this.absorbers);\n    }\n  }\n\n  particleUpdate(particle) {\n    for (const absorber of this.array) {\n      absorber.attract(particle);\n\n      if (particle.destroyed) {\n        break;\n      }\n    }\n  }\n\n  removeAbsorber(absorber) {\n    const index = this.array.indexOf(absorber);\n\n    if (index >= 0) {\n      this.array.splice(index, 1);\n    }\n  }\n\n  resize() {\n    for (const absorber of this.array) {\n      absorber.resize();\n    }\n  }\n\n  stop() {\n    this.array = [];\n  }\n\n}","map":{"version":3,"names":["Absorber","AbsorberInstance","itemFromArray","Absorbers","constructor","container","array","absorbers","interactivityAbsorbers","getAbsorber","idxOrName","undefined","find","t","name","addAbsorber","options","position","absorber","push","draw","context","save","restore","handleClickMode","mode","absorberOptions","modeAbsorbers","absorbersModeOptions","Array","length","absorbersOptions","aPosition","interactivity","mouse","clickPosition","init","_a","_b","map","s","tmp","load","modes","particleUpdate","particle","attract","destroyed","removeAbsorber","index","indexOf","splice","resize","stop"],"sources":["C:/Users/VLAD/Desktop/Study/Self Study Projects/My Projects/React/MedicalInspection/node_modules/tsparticles-plugin-absorbers/esm/Absorbers.js"],"sourcesContent":["import { Absorber } from \"./Options/Classes/Absorber\";\nimport { AbsorberInstance } from \"./AbsorberInstance\";\nimport { itemFromArray } from \"tsparticles-engine\";\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || typeof idxOrName === \"number\"\n            ? this.array[idxOrName || 0]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = (options, position) => this.addAbsorber(options, position);\n    }\n    addAbsorber(options, position) {\n        const absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            context.save();\n            absorber.draw(context);\n            context.restore();\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            let absorbersModeOptions;\n            if (modeAbsorbers instanceof Array) {\n                if (modeAbsorbers.length > 0) {\n                    absorbersModeOptions = itemFromArray(modeAbsorbers);\n                }\n            }\n            else {\n                absorbersModeOptions = modeAbsorbers;\n            }\n            const absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : (absorberOptions instanceof Array ? itemFromArray(absorberOptions) : absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    init(options) {\n        var _a, _b;\n        if (!options) {\n            return;\n        }\n        if (options.absorbers) {\n            if (options.absorbers instanceof Array) {\n                this.absorbers = options.absorbers.map((s) => {\n                    const tmp = new Absorber();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.absorbers instanceof Array) {\n                    this.absorbers = new Absorber();\n                }\n                this.absorbers.load(options.absorbers);\n            }\n        }\n        const interactivityAbsorbers = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers;\n        if (interactivityAbsorbers) {\n            if (interactivityAbsorbers instanceof Array) {\n                this.interactivityAbsorbers = interactivityAbsorbers.map((s) => {\n                    const tmp = new Absorber();\n                    tmp.load(s);\n                    return tmp;\n                });\n            }\n            else {\n                if (this.interactivityAbsorbers instanceof Array) {\n                    this.interactivityAbsorbers = new Absorber();\n                }\n                this.interactivityAbsorbers.load(interactivityAbsorbers);\n            }\n        }\n        if (this.absorbers instanceof Array) {\n            for (const absorberOptions of this.absorbers) {\n                this.addAbsorber(absorberOptions);\n            }\n        }\n        else {\n            this.addAbsorber(this.absorbers);\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber);\n        if (index >= 0) {\n            this.array.splice(index, 1);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}